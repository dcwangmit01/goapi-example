package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xcf\x8e\xd3\x30\x10\xc6\xef\x79\x8a\x91\xe1\xb8\xda\x94\x3d\xf6\x86\xe0\x82\x10\x17\x24\xb8\xa0\x1e\xa6\xc9\x24\xeb\x6d\x62\x7b\x3d\x4e\x21\x5a\xe5\xdd\x91\x9d\x74\xe3\x75\xbb\x10\x04\x02\x0e\xc9\xa1\x72\x3d\x7f\xf4\xcd\xe7\x5f\x1b\x3f\x64\x00\x82\xbf\x62\x5d\x93\x15\x5b\x10\x37\xd7\x1b\x71\xe5\xf7\xa4\xaa\xb4\xd8\x82\x8f\x03\x08\x27\x5d\x43\x3e\x4e\xdf\xb0\x35\x0d\xe5\x66\x9f\xa3\x31\xd7\xc6\x6a\xa7\x43\x01\x80\x38\x92\x65\xa9\x95\x4f\x9b\x96\xa0\xb4\x03\x26\x27\x32\x80\x21\xb4\x2d\xb4\xe2\xae\x25\x16\x5b\xf8\x32\x56\xa1\x31\x8d\x2c\xd0\x49\xad\xf2\x3b\xd6\xca\xe7\xee\x42\xae\xb1\xba\xec\x8a\x85\xb9\xe8\x6e\x79\xd6\x9b\x1f\x5f\xe5\x07\xea\x8f\xd8\xe4\x0f\x07\xea\x87\xc7\x08\x80\xa8\xc9\x45\x5f\x01\x84\x36\x64\x43\xcf\x77\xa5\xd7\xfe\x9e\xfa\xcf\xd8\x7c\x24\x2c\xa7\xc1\x42\x92\x25\x36\x5a\x31\xf1\x93\x5a\x00\x71\xb3\xd9\x24\x5b\x00\xa2\x24\x2e\xac\x34\x6e\xb2\xe3\x35\x70\x57\x14\xc4\x5c\x75\x0d\x9c\x3a\x5d\x47\xed\x43\x11\x17\xb7\xd4\xe2\x59\x33\x00\xf1\xd2\x52\xe5\xfb\xbc\xc8\x4b\xaa\xa4\x92\xbe\x2f\xe7\x66\x3f\x4a\xfd\x40\xcc\x58\x93\x78\x52\x35\x64\x97\xd6\x43\x34\x91\x41\x8b\x2d\x39\xb2\xb3\xc1\xe3\x93\xcc\xa2\xb0\x0d\x47\x7f\xa0\x3e\x55\x2c\xc3\x74\xde\xfb\x34\x62\xe9\xbe\x93\x96\xbc\xa1\xce\x76\x94\x44\x5d\x6f\x42\x4b\x76\x56\xaa\x3a\x16\x3e\x5c\xfd\x5c\xc8\x11\x9b\x8e\x2e\x4b\xb9\xef\xc8\x9e\xa9\x8c\xb4\x54\xd8\xf0\x2f\x88\x79\x5c\xef\x22\xdf\x1c\xd6\xa9\x63\x13\x33\x73\xed\x2e\x4b\xc6\x11\x25\x35\xe4\x68\x01\x78\x6f\xc7\xc4\x15\xbd\x15\xbd\xf0\xfc\x3e\x7a\x46\xf3\x92\x7f\xbc\x4f\xa6\xc4\x15\xbc\x31\xef\xbf\x03\x6f\xaf\xcb\x67\x94\x5c\x8a\xfc\x58\xc9\x5f\xf0\xfc\x0f\x40\xdb\x2d\x61\xf6\x8d\xa5\x95\xd9\x29\x6f\x65\xf6\x1f\x31\x9b\x9d\x3e\xc7\x2b\x6e\x24\x63\xbe\x90\xa6\x7a\xa2\xfb\xe8\xc9\x64\xbd\xbf\xa3\xc2\x89\xf9\x17\x60\x3d\xf2\x4e\x26\x28\x87\xf3\x4d\xd8\x7e\xee\x9c\x62\x8c\xc6\x57\xd7\xd2\xc2\xf3\xd9\xb2\x21\xfb\x1e\x00\x00\xff\xff\x3a\x17\x72\x94\x2d\x0c\x00\x00")

func swagger_json() ([]byte, error) {
	return bindata_read(
		_swagger_json,
		"swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"swagger.json": swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"swagger.json": &_bintree_t{swagger_json, map[string]*_bintree_t{
	}},
}}
